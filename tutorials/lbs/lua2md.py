# import numpy as npimport os as osimport re as re# import shutil# %%def load_md_header(header_file):    with open(header_file, 'r') as file1:        header = file1.read()    return header# %%def transform_lua_to_md(lua_input_file, header, verbose=False):    # Regular expression to match repeated "-" characters    dash_pattern = re.compile(r"--+")    # dash_pattern = re.compile(r"-1+")    # Specify the input file, start marker, and end marker    start_marker = "@doc"    end_marker = "@end"    # print(os.path.basename(filename))    basename = os.path.splitext(lua_input_file)[0]    print("Working on file ", lua_input_file)    # Initialize a flag to track whether we are inside the Markdown text    inside_markdown = False    # List to store the extracted lines    extracted_lines = []    # List to store the extracted lines with only the input    extracted_lines_input_only = []    extracted_lines_input_only.append("___\n")    extracted_lines_input_only.append("## The complete input is below:\n")    extracted_lines_input_only.append(        "You can copy/paste it or look in the file named ```{}```:\n".format(lua_input_file))    extracted_lines_input_only.append("```\n")    # Initialize counter    counter = 0    # Initialize a flag to know if a code block has been opened    code_block = False    # Open the file for reading    with open(lua_input_file, "r") as file:        for line in file:            # Check if we are inside the Markdown text            if inside_markdown:                # Check if the current line contains the end marker                if end_marker in line:                    inside_markdown = False                    # About to begin a Markdown code block                    code_block = True                    extracted_lines.append("```\n")                else:                    # Wrap the line with Markdown code block tags                    clean_line = dash_pattern.sub("", line)                    extracted_lines.append(clean_line)            # else, we are not inside the Markdown text            else:                # Check if we are about to enter a Markdown area                if start_marker in line:                    inside_markdown = True                    if code_block:                        # About to end a Markdown code block                        code_block = False                        extracted_lines.append("```\n")                else:                    extracted_lines.append(line)                    extracted_lines_input_only.append(line)            # increment counter            counter += 1    if code_block:        # finish the md portion. if we just added ``` as the last action, then ingore that last line        word_to_exclude = "```"        if word_to_exclude not in extracted_lines[-1]:            extracted_lines.append("```\n")        else:            extracted_lines = extracted_lines[:-1]        # finish the input portion        extracted_lines_input_only.append("```\n")    # Print the extracted lines    if verbose:        for line in extracted_lines:            print(line, end="")        print('\n\n####Done!!!')    # Optionally, you can save the extracted lines to a new file    with open(basename+".md", "w") as output_file:        if len(header) > 0:            output_file.write(header)        output_file.writelines(extracted_lines)        output_file.writelines(extracted_lines_input_only)        output_file.writelines(            "___\nBack to [**Tutorial Home**](../tutorials_transport.md#first_example)")# %%def transform_all_lua_to_md(root_dir, header):    # Define the source and destination file extensions    source_extension = ".lua"    # destination_extension = ".md"    # Walk through the directory and its subdirectories    for foldername, subfolders, filenames in os.walk(root_dir):        for filename in filenames:            # print(filename)            if filename.endswith(source_extension):                # get the lua input file                source_path = os.path.join(foldername, filename)                # mkdir a transformed copy into an md file                transform_lua_to_md(source_path, header)                # destination_path = os.path.join(foldername, os.path.splitext(filename)[0] + destination_extension)                # # Copy the file with the new extension                # shutil.copy(source_path, destination_path)# load header for md filesheader_file = "header_jax.txt"header = load_md_header(header_file)header = []# go through the entire directory and transfor each .lua file into a .md fileroot_directory = "./"  # Replace with the root directory where you want to searchtransform_all_lua_to_md(root_directory, header)